- 기본적으로 장고 프로젝트 한 개당 한개의 DB를 사용한다.
- 장고 프로젝트에는 기본적으로 관리프로그램이 내장되기 때문이다.

- postgresql 에 db 생성 및 계정생성 접근권한 부여
1. create database djdb;
2. create user djdb with password 'djdb';
3. grant all privileges on all tables in schema public to djdb;
4. data/pg_hba.conf 접근 설정 후 재시작



- pycharm(community) 에서 Django 프로젝트 시작하기


1. pycharm 프로젝트 생성(python 프로젝트)

2. django 설치
   [터미널]
    pip install django

3. 장고 프로젝트 생성
   [터미널]
    django-admin startproject python_ch3

4. 디렉토리 정리
   -> pycharm 프로젝트와 django 프로젝트의 디렉토리 일치시키는 작업
        * manage.py 파일을 프로젝트/ 로 옮김



        * 최하위 python3폴더 아래의 .py 파일들은 바로 상위 python3 폴더로 옮긴 후, 최하위 python 폴더 삭제



5. psycopg2(postgres db lib) 설치
   [터미널]
    pip install psycopg2

6. settings.py 설정
   1) TIME_ZONE = 'Asia/Seoul'

   2) DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'pysite',
            'USER': 'pysite',
            'PASSWORD': 'pysite',
            'HOST': '192.168.1.221',
            'PORT': 5432
        }
    }

   3) Tempate 디렉토리 설정
      TEMPLATES = [
      . . .

      'DIRS': [os.path.join(BASE_DIR, 'templates')],
      . . .

      python_ch3
          |
          |------  templates (생성)

   4) STATIC 디렉토리 설정 및 url 매핑 (settings.py)
      STATICFILES_DIRS = (os.path.join(BASE_DIR, 'statics'),)
      STATIC_URL = '/assets/'

7. 장고프로젝트의 기본 관리 어플리케이션이 사용하는 테이블을 생성
    물리DB와 생성된 테이블과의 Sync를 맞춰야하기 때문에 이부분에서 오류가 많이남.
    [터미널]
    python manage.py migrate

8. 장고 프로젝트의 기본 관리 어플리케이션 로그인 계정 생성하기
    (관리 계정 생성하기)
    [터미널]
    python manage.py createsuperuser

9. 지금 까지 작업내용확인하기
    [터미널]
    python manage.py runserver 0.0.0.0:8888
==========================================

Application 작업
1) main
	1. 어플리케이션 추가
 	   [터미널]
	    python manage.py startapp pysite  #이 명령어를 입력해야 INSTALLED_APPS에 등록된 프로젝트가 연동됨

	2. 어플리케이션 등록 (settings.py)
		INSTALLED_APPS = [
			'main',
			' 	'	 '
			' 	'	 '
		]

	3. template
		|---main
		어플리케이션 template 디렉토리 생성

	4. Model 정의(생략)
	5. urls.py 에서 url-view의 handler 매핑
	6. views.py에서 핸들러 함수 구현(요청처리, 모델작업, )
	7. 혹시 화면이 필요한 경우, 해당 template 작업

2) emaillist
	1. 어플리케이션 추가
 	   [터미널]
	    python manage.py startapp emaillist
	2. 어플리케이션 등록 (settings.py)
		INSTALLED_APPS = [
			'pysite',
			' 	'	 '
			' 	'	 '
		]

	3. template
		|---user
		어플리케이션 template 디렉토리 생성

	4-1 Model 정의(생략)
	4-2 admin.py에
		admin.site.register(Emaillist) 추가
	4-3 migrations 이름의 DDL python 모듈을 생성
		python manage.py makemigrations
	4-4 물리 DB와 스키마 동기화 작업
		python manage.py migrate

	5. urls.py 에서 url-view의 handler 매핑
	6. views.py에서 핸들러 함수 구현(요청처리, 모델작업, )
	7. 혹시 화면이 필요한 경우, 해당 template 작업





# Django-advice start project python_ch3

실습순서
- python_ch3
- mysitepy
- jblogpy

C:/python/python3.7
              |---/lib
                    |-- Django













